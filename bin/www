#!/usr/bin/env node
const app = require("../app");
const debug = require("debug")("dmg-dealt-rework:server");
const http = require("http");
const mongoose = require("mongoose");
const AppConfig = require("../appconfig");


// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

// Create HTTP server
const server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// MongoDB connection.
const db = mongoose.connect(AppConfig.MONGODB_CONNECTION, (err) => {
	if (err) {
		throw new Error("Connection to MongoDB failed");
	} else {
		console.log("Connection successful to: " + AppConfig.MONGODB_CONNECTION);
	}
});

// Normalize a port into a number, string, or false.
function normalizePort(val) {
	const port = parseInt(val, 10);

	// named pipe
	if (isNaN(port))
		return val;

	// port number
	if (port >= 0)
		return port;

	return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
	if (error.syscall !== "listen")
		throw error;

	const bind = typeof port === "string"
		? "Pipe " + port
		: "Port " + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges");
			process.exit(1);
			break;
		case "EADDRINUSE":
			console.error(bind + " is already in use");
			process.exit(1);
			break;
		default:
			throw error;
	}
}

// Event listener for HTTP server "listening" event.
function onListening() {
	const addr = server.address();
	const bind = typeof addr === "string"
		? "pipe " + addr
		: "port " + addr.port;
	debug("Listening on " + bind);
}